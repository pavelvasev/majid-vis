import components.creative_points 1.0 

Scene {

  Text {
    property var tag: "top"
    text: "<a href='https://yadi.sk/d/I_z-8x_ZH8Eguw' target=_bank>Sample data</a>"
  }

  Text {
    text: "Provide json data:"
    property var tag: "left"
  }

  ///////// Data
  DataParam {
    guid: "jsonfile"
    file: Qt.resolvedUrl( "a.json")
    JsonLoader {
      id: json
      file: parent.file
    }
  }

  ///////// Vis
  
  // fine params: lines r 0.3, spheres r 2.3, spheres opacity 9

  axes.visible: true

  Param {
    text: "z scale"
    id: zScale
    min: 0.3
    max: 10.1
    step: 0.1
    value: 1
  }

  Param {
    text: "all scale"
    id: allScale
    min: 0.1
    max: 10.1
    step: 0.1
    value: 1
  }
  
  Param {
    text: "lines r"
    id: rScale
    min: 0.05
    max: 10.0
    step: 0.05
    value: 0.05
  }
  
  Param {
    text: spheres.hasr ? "spheres r (not used)" : "spheres r"
    id: sScale
    min: 0.05
    max: 10.0
    step: 0.05
    value: 0.3
  }  

  Cylinders {
    id: lines
    radius: rScale.value

    property var positions2: {
      var zz = zScale.value;
      var res = [];
      (json.output.lines || []).forEach( function(v) { 
        res.push( v[0] );
        res.push( v[1] );
        res.push( v[2]*zz );
        res.push( v[3] );
        res.push( v[4] );
        res.push( v[5]*zz );
      })
      return res;
    }
    positions: {
      var s = allScale.value;
      return positions2.map( function(e) { return s * e } );
    }
    
    colors: {      
      var res = [];
      (json.output.lines || []).forEach( function(v) { res.push( v[6] ); res.push( v[7] ); res.push( v[8] ); } )
      //console.log("setting colors",merged);
      return res;
    }
    
    VisibleParam {
      text: "Lines"
    }
    OpacityParam {
      text: "Lines opacity"
    }
  }
  
  CreativePoints {
    id: spheres
    radius: sScale.value

    property var positions2: {
      var zz = zScale.value;
      var res = [];
      (json.output.spheres || []).forEach( function(v) { res.push( v[0] ); res.push( v[1] ); res.push( v[2]*zz ); } )
      return res;
    }
    positions: {
      var s = allScale.value;
      return positions2.map( function(e) { return s * e } );
    }

    colors: {
      //var arrays = (json.output.lines || []).map( function(v) { return [ v[6],v[7],v[8], v[6],v[7],v[8] ]; } )
      var res = [];
      (json.output.spheres || []).forEach( function(v) { res.push(v[3]); res.push(v[4]); res.push(v[5]); } )
      return res;
    }
    
    property bool hasr: (((json.output.spheres || [])[0] || [])[6] > 0)
    radiuses: {
      if (!hasr) return [];
      //var dr = sScale.value;
      var res = [];
      (json.output.spheres || []).forEach( function(v) { res.push( v[6] ); } )
      return res;
    }
    
    VisibleParam {
      text: "Spheres"
    }
    OpacityParam {
      text: "Spheres opacity"
    }
  }
  

  Repeater {
    model: cbVisText.checked ? (json.output.text || []).length : 0
    TextSprite {
      text: json.output.text[ index ][3]
      center: [ json.output.text[ index ][0]*allScale.value, json.output.text[ index ][1]*allScale.value, json.output.text[ index ][2]*zScale.value*allScale.value ]
      centered: false
      texOffset: [-0.5,0.45]
      texSize: [512,256]
      bold: true
    }
  }
  
  CheckBoxParam {
    text: "Text"
    checked: true
    id: cbVisText
  }
  
  BackgroundColor {
   ColorParam{}
  }

}